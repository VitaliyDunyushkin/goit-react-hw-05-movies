{"version":3,"file":"static/js/56.7730d75f.chunk.js","mappings":"2OAAaA,EAAY,mCAAG,WAAMC,GAAN,8EACpBC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANoB,SAUbC,MAAM,sCAAD,OACsBN,EADtB,2BAEhBC,GACAM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IAbW,mFAAH,sD,SCKV,SAASC,IACtB,IAAQV,GAAYW,EAAAA,EAAAA,MAAZX,QAGR,GAAwBY,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRhB,EAAaC,GACVO,MAAK,SAAAC,GACJM,EAAQN,EAASK,MAAQ,GAC1B,IACAG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACjB,KAGF,+BACE,wBACGa,EAAKO,OAAS,EACXP,EAAKQ,KAAI,SAAAC,GAAK,OACZ,2BACE,wBAAKA,EAAMC,QACX,uCAAeD,EAAME,cACrB,gBACEC,IArBQ,mCAqBeH,EAAMI,cAAgB,WAC7CC,IAAKL,EAAMC,KACXK,MAAO,QANFN,EAAMO,QADH,IAWd,4BAIX,C,sBCtCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOpB,GAEP,YADAc,EAAOd,EAET,CAEImB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOhC,KAAK2B,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOlB,GACda,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASlB,EACnE,CAEAiB,OAAMe,EACR,GACF,CACF,C","sources":["api/getMovieCast.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const getMovieCast = async movieId => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNmY0OTNkZTM3N2Q0OWFlMjJiYjI0OGE1OTlhZTQzMyIsInN1YiI6IjY0OWM1NGFhOTYzODY0MDExZGE4ZmExNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.AraQa6sw5Xc4jMFmOF5nTNm9FYUuccfqZCYZiwyPdHw',\n    },\n  };\n\n  return await fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n    options\n  ).then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'api/getMovieCast';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\n\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCast(movieId)\n      .then(response => {\n        setCast(response.cast || []);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {cast.length > 0\n          ? cast.map(actor => (\n              <li key={actor.cast_id}>\n                <h3>{actor.name}</h3>\n                <p>character: {actor.character}</p>\n                <img\n                  src={BASE_POSTER_URL + actor.profile_path || 'no photo'}\n                  alt={actor.name}\n                  width={200}\n                />\n              </li>\n            ))\n          : 'Ooops ... no cast info'}\n      </ul>\n    </>\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["getMovieCast","movieId","options","method","headers","accept","Authorization","fetch","then","response","json","Cast","useParams","useState","cast","setCast","useEffect","catch","err","console","error","length","map","actor","name","character","src","profile_path","alt","width","cast_id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined"],"sourceRoot":""}